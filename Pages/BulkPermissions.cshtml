@page
@model EgnyteApp.Pages.BulkPermissionsModel
@{
    ViewData["Title"] = "Bulk Folder Permissions";
}

<div class="container">
    @Html.AntiForgeryToken()
    
    <h1>Bulk Folder Permissions</h1>

    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Page("./BulkPermissions", new { path = "/" })">Root</a>
            </li>
            @{
                var segments = Model.FolderPath?.Split('/', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();
                var pathSoFar = "";
                for (int i = 0; i < segments.Length; i++)
                {
                    pathSoFar += "/" + segments[i];
                    if (i == segments.Length - 1)
                    {
                        <li class="breadcrumb-item active" aria-current="page">@segments[i]</li>
                    }
                    else
                    {
                        <li class="breadcrumb-item">
                            <a href="@Url.Page("./BulkPermissions", new { path = pathSoFar })">@segments[i]</a>
                        </li>
                    }
                }
            }
        </ol>
    </nav>

    @if (Model.Error != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            @Model.Error
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.Errors.Any())
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Some operations failed:</strong>
            <ul class="mb-0 mt-2">
                @foreach (var error in Model.Errors)
                {
                    <li>@error</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.SuccessMessage != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>
            @Model.SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Subfolders Permissions</h5>
            <div class="group-input-container">
                <div class="d-flex gap-2">
                    <div class="input-group">
                        <span class="input-group-text">Group</span>
                        <input id="GroupName" name="GroupName" class="form-control" required placeholder="Enter group name"
                            style="min-width: 200px;" value="@Model.GroupName" />
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Model.CurrentFolderContent?.folders?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Folder</th>
                                <th style="width: 200px;">Permission</th>
                                <th style="width: 100px;">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < Model.CurrentFolderContent.folders.Count; i++)
                            {
                                var folder = Model.CurrentFolderContent.folders[i];
                                if (!string.IsNullOrEmpty(folder.path))
                                {
                                    <tr data-folder-path="@folder.path">
                                        <td>
                                            <i class="bi bi-folder2 text-warning me-2"></i>
                                            <a href="@Url.Page("./BulkPermissions", new { path = folder.path })"
                                                class="folder-link">@folder.name</a>
                                        </td>
                                        <td>
                                            <select class="form-select permission-select" data-folder-path="@folder.path">
                                                @foreach (var perm in Model.PermissionValues)
                                                {
                                                    <option value="@perm">@perm</option>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <span class="status-indicator">
                                                <i class="bi bi-dash-circle text-secondary"></i>
                                            </span>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    This folder has no subfolders.
                </div>
            }
        </div>
    </div>

    @if (Model.DebugInfo.Any())
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">API Debug Information</h5>
                <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse"
                    data-bs-target="#debugInfo" aria-expanded="false" aria-controls="debugInfo">
                    Toggle Debug Info
                </button>
            </div>
            <div class="collapse show" id="debugInfo">
                <div class="card-body">
                    @foreach (var debug in Model.DebugInfo.OrderByDescending(d => d.Timestamp))
                    {
                        <div class="card mb-3 @(debug.IsSuccess ? "border-success" : "border-danger")">
                            <div class="card-header bg-transparent @(debug.IsSuccess ? "border-success" : "border-danger")">
                                <div class="d-flex justify-content-between align-items-center">
                                    <strong>@debug.Operation</strong>
                                    <span class="text-muted">@debug.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <h6 class="card-subtitle mb-2">Endpoint</h6>
                                <pre class="bg-light p-2 rounded"><code>@debug.Endpoint</code></pre>

                                <h6 class="card-subtitle mb-2 mt-3">Request</h6>
                                <pre class="bg-light p-2 rounded"><code>@debug.Request</code></pre>

                                <h6 class="card-subtitle mb-2 mt-3">Response</h6>
                                <pre class="bg-light p-2 rounded"><code>@(debug.IsSuccess ? debug.Response : debug.ErrorMessage)</code></pre>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const permissionSelects = document.querySelectorAll('.permission-select');
            const groupNameInput = document.getElementById('GroupName');

            // Handle permission changes
            permissionSelects.forEach(select => {
                select.addEventListener('change', async function() {
                    const folderPath = this.dataset.folderPath;
                    const permission = this.value;
                    const groupName = groupNameInput.value;
                    const row = this.closest('tr');
                    const statusCell = row.querySelector('.status-indicator');

                    if (!groupName) {
                        alert('Please enter a group name first.');
                        this.value = '';
                        return;
                    }

                    if (!permission) {
                        statusCell.innerHTML = '<i class="bi bi-dash-circle text-secondary"></i>';
                        return;
                    }

                    statusCell.innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';

                    try {
                        const response = await fetch('?handler=UpdatePermission', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify({
                                folderPath,
                                groupName,
                                permission
                            })
                        });

                        if (!response.ok) {
                            throw new Error('Permission update failed');
                        }

                        const result = await response.json();
                        if (result.success) {
                            statusCell.innerHTML = '<i class="bi bi-check-circle text-success"></i>';
                            
                            // Update debug info
                            const debugInfo = document.getElementById('debugInfo');
                            if (debugInfo) {
                                debugInfo.querySelector('.card-body').insertAdjacentHTML('afterbegin', result.debugHtml);
                            }
                        } else {
                            throw new Error(result.error || 'Permission update failed');
                        }
                    } catch (error) {
                        statusCell.innerHTML = '<i class="bi bi-x-circle text-danger" title="' + error.message + '"></i>';
                        console.error('Error:', error);
                    }
                });
            });
        });
    </script>
}