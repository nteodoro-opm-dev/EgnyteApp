@page
@model EgnyteApp.Pages.BulkPermissionsModel
@{
    ViewData["Title"] = "Bulk Folder Permissions";
}

<div class="container">
    <h1>Bulk Folder Permissions</h1>

    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Page("./BulkPermissions", new { path = "/" })">Root</a>
            </li>
            @{
                var segments = Model.FolderPath?.Split('/', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();
                var pathSoFar = "";
                for (int i = 0; i < segments.Length; i++)
                {
                    pathSoFar += "/" + segments[i];
                    if (i == segments.Length - 1)
                    {
                        <li class="breadcrumb-item active" aria-current="page">@segments[i]</li>
                    }
                    else
                    {
                        <li class="breadcrumb-item">
                            <a href="@Url.Page("./BulkPermissions", new { path = pathSoFar })">@segments[i]</a>
                        </li>
                    }
                }
            }
        </ol>
    </nav>

    @if (Model.Error != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            @Model.Error
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.Errors.Any())
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Some operations failed:</strong>
            <ul class="mb-0 mt-2">
                @foreach (var error in Model.Errors)
                {
                    <li>@error</li>
                }
            </ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model.SuccessMessage != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>
            @Model.SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Subfolders Permissions</h5>
            <div class="group-input-container">
                <form method="post" class="d-flex gap-2">
                    <input type="hidden" asp-for="FolderPath" />
                    <div class="input-group">
                        <span class="input-group-text">Group</span>
                        <input asp-for="GroupName" class="form-control" required placeholder="Enter group name"
                            style="min-width: 200px;" />
                    </div>
                </form>
            </div>
        </div>
        <div class="card-body">
            <form method="post" id="permissionsForm">
                <input type="hidden" asp-for="FolderPath" />
                <input type="hidden" asp-for="GroupName" />

                @if (Model.CurrentFolderContent?.folders?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th style="width: 40px;">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="selectAll" />
                                        </div>
                                    </th>
                                    <th>Folder</th>
                                    <th style="width: 200px;">Permission</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (var i = 0; i < Model.CurrentFolderContent.folders.Count; i++)
                                {
                                    var folder = Model.CurrentFolderContent.folders[i];
                                    if (!string.IsNullOrEmpty(folder.path))
                                    {
                                        <tr>
                                            <td>
                                                <div class="form-check">
                                                    <input class="form-check-input folder-check" type="checkbox"
                                                        data-index="@i" />
                                                </div>
                                            </td>
                                            <td>
                                                <i class="bi bi-folder2 text-warning me-2"></i>
                                                <a href="@Url.Page("./BulkPermissions", new { path = folder.path })"
                                                    class="folder-link">@folder.name</a>
                                                <input type="hidden" name="SubFolders[@i]" value="@folder.path" />
                                            </td>
                                            <td>
                                                <select name="Permissions[@i]" class="form-select permission-select"
                                                    disabled>
                                                    @foreach (var perm in Model.PermissionValues)
                                                    {
                                                        <option value="@perm">@perm</option>
                                                    }
                                                </select>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="mt-3 d-flex align-items-center gap-3">
                        <button type="submit" class="btn btn-primary" id="applyPermissions">
                            <i class="bi bi-shield-check me-2"></i>Apply Permissions
                        </button>
                        <div id="processingStatus" class="d-none">
                            <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span class="text-primary process-status-text"></span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        This folder has no subfolders.
                    </div>
                }
            </form>
        </div>
    </div>

    @if (Model.DebugInfo.Any())
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">API Debug Information</h5>
                <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse"
                    data-bs-target="#debugInfo" aria-expanded="false" aria-controls="debugInfo">
                    Toggle Debug Info
                </button>
            </div>
            <div class="collapse" id="debugInfo">
                <div class="card-body">
                    @foreach (var debug in Model.DebugInfo.OrderByDescending(d => d.Timestamp))
                    {
                        <div class="card mb-3 @(debug.IsSuccess ? "border-success" : "border-danger")">
                            <div class="card-header bg-transparent @(debug.IsSuccess ? "border-success" : "border-danger")">
                                <div class="d-flex justify-content-between align-items-center">
                                    <strong>@debug.Operation</strong>
                                    <span class="text-muted">@debug.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <h6 class="card-subtitle mb-2">Endpoint</h6>
                                <pre class="bg-light p-2 rounded"><code>@debug.Endpoint</code></pre>

                                <h6 class="card-subtitle mb-2 mt-3">Request</h6>
                                <pre class="bg-light p-2 rounded"><code>@debug.Request</code></pre>

                                <h6 class="card-subtitle mb-2 mt-3">Response</h6>
                                <pre class="bg-light p-2 rounded"><code>@(debug.IsSuccess ? debug.Response : debug.ErrorMessage)
                                    </code></pre>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selectAll = document.getElementById('selectAll');
            const folderChecks = document.querySelectorAll('.folder-check');
            const permissionSelects = document.querySelectorAll('.permission-select');
            const groupNameInput = document.getElementById('GroupName');
            const form = document.getElementById('permissionsForm');
            const applyButton = document.getElementById('applyPermissions');
            const processingStatus = document.getElementById('processingStatus');
            const statusText = processingStatus.querySelector('.process-status-text');

            // Update process status from TempData
            @if (!string.IsNullOrEmpty(Model.ProcessStatus))
            {
                <text>
                showProcessing('@Model.ProcessStatus');
                </text>
            }

            function showProcessing(status) {
                processingStatus.classList.remove('d-none');
                applyButton.disabled = true;
                statusText.textContent = status;
                selectAll.disabled = true;
                folderChecks.forEach(check => check.disabled = true);
                permissionSelects.forEach(select => select.disabled = true);
            }

            function hideProcessing() {
                processingStatus.classList.add('d-none');
                applyButton.disabled = false;
                selectAll.disabled = false;
                folderChecks.forEach((check, index) => {
                    check.disabled = false;
                    permissionSelects[index].disabled = !check.checked;
                });
            }

            // Update select all state
            function updateSelectAllState() {
                const checkedBoxes = document.querySelectorAll('.folder-check:checked');
                selectAll.checked = checkedBoxes.length === folderChecks.length;
                selectAll.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < folderChecks.length;
            }

            // Handle select all checkbox
            selectAll?.addEventListener('change', function () {
                folderChecks.forEach((checkbox, index) => {
                    checkbox.checked = selectAll.checked;
                    permissionSelects[index].disabled = !selectAll.checked;
                });
            });

            // Handle individual checkboxes
            folderChecks.forEach((checkbox, index) => {
                checkbox.addEventListener('change', function () {
                    permissionSelects[index].disabled = !this.checked;
                    updateSelectAllState();
                });
            });

            // Sync group name between forms
            groupNameInput?.addEventListener('input', function () {
                const hiddenGroupInput = form.querySelector('input[name="GroupName"]');
                if (hiddenGroupInput) {
                    hiddenGroupInput.value = this.value;
                }
            });

            // Form submission
            form.addEventListener('submit', function () {
                const selectedCount = document.querySelectorAll('.folder-check:checked').length;
                if (selectedCount > 0) {
                    showProcessing('Starting permission updates...');
                }
            });

            // Initialize permission selects state
            folderChecks.forEach((checkbox, index) => {
                permissionSelects[index].disabled = !checkbox.checked;
            });

            // Update initial select all state
            updateSelectAllState();

            // Hide processing if we're not in a processing state
            @if (string.IsNullOrEmpty(Model.ProcessStatus))
            {
                <text>
                hideProcessing();
                </text>
            }
        });
    </script>
}