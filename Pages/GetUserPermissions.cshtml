@page
@model EgnyteApp.Pages.GetUserPermissionsModel
@{
    ViewData["Title"] = "Get User Effective Permissions";
}

<!-- Page Header -->
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1 class="mb-0">Get User Effective Permissions</h1>
    </div>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb mb-0">
            <li class="breadcrumb-item">
                <a href="@Url.Page("./GetUserPermissions", new { folderPath = "/" })">Root</a>
            </li>
            @{
                var segments = Model.FolderPath?.Split('/', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();
                var pathSoFar = "";
                for (int i = 0; i < segments.Length; i++)
                {
                    pathSoFar += "/" + segments[i];
                    if (i == segments.Length - 1)
                    {
                        <li class="breadcrumb-item active" aria-current="page">@segments[i]</li>
                    }
                    else
                    {
                        <li class="breadcrumb-item">
                            <a href="@Url.Page("./GetUserPermissions", new { folderPath = pathSoFar })">@segments[i]</a>
                        </li>
                    }
                }
            }
        </ol>
    </nav>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Select Folder</h5>
                </div>
                <div class="card-body">
                    @if (Model.CurrentFolderContent?.folders != null)
                    {
                        <div class="list-group">
                            @foreach (var folder in Model.CurrentFolderContent.folders)
                            {
                                <a href="@Url.Page("./GetUserPermissions", new { folderPath = folder.path })" 
                                class="list-group-item list-group-item-action">
                                    <i class="bi bi-folder text-warning"></i>
                                    @folder.name
                                </a>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Check User Permissions</h5>
                </div>
                <div class="card-body">
                    <form method="post">
                        <input type="hidden" asp-for="FolderPath" />
                        <div class="mb-3">
                            <label asp-for="Username" class="form-label">Username (leave empty for current user)</label>
                            <input asp-for="Username" class="form-control" />
                        </div>
                        <button type="submit" class="btn btn-primary">Get Permissions</button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            @if (Model.Error != null)
            {
                <div class="alert alert-danger">@Model.Error</div>
            }

            @if (!string.IsNullOrEmpty(Model.Permission))
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Permission Level</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>User:</strong> @(string.IsNullOrEmpty(Model.Username) ? "Current User" : Model.Username)</p>
                        <p><strong>Folder:</strong> @Model.FolderPath</p>
                        <p><strong>Permission:</strong> @Model.Permission</p>

                        <div class="mt-3">
                            <h6>Allowed Actions:</h6>
                            <ul class="list-unstyled">
                                <li><i class="bi @(Model.Permission != "None" ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Preview Files in WebUI</li>
                                <li><i class="bi @(IsAllowed("Viewer") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Download/Read Files, Folders</li>
                                <li><i class="bi @(IsAllowed("Editor") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Copy Files, Folders</li>
                                <li><i class="bi @(IsAllowed("Editor") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Upload/Edit Files, Folders</li>
                                <li><i class="bi @(IsAllowed("Editor") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Create Sub-folder</li>
                                <li><i class="bi @(IsAllowed("Editor") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Rename Files, Folders</li>
                                <li><i class="bi @(IsAllowed("Editor") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Create Upload Links</li>
                                <li><i class="bi @(IsAllowed("Full") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Delete Files, Folders</li>
                                <li><i class="bi @(IsAllowed("Full") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Change Permissions</li>
                                <li><i class="bi @(IsAllowed("Owner") ? "bi-check-circle-fill text-success" : "bi-x-circle-fill text-danger")"></i> Delete Folder</li>
                            </ul>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@functions {
    private bool IsAllowed(string requiredLevel)
    {
        var hierarchy = new Dictionary<string, int>
        {
            { "None", 0 },
            { "Viewer", 1 },
            { "Editor", 2 },
            { "Full", 3 },
            { "Owner", 4 }
        };

        if (!hierarchy.TryGetValue(Model.Permission ?? "", out var userLevel) ||
            !hierarchy.TryGetValue(requiredLevel, out var required))
        {
            return false;
        }

        return userLevel >= required;
    }
}